extends layout

block content
  h1 CS184 Final project
  h2 API Guide (v1)
  h3 Responses
  p There are 4 possible responses from an API endpoint:
  ul
    li Data where userError is false or undefined.  This indicates a successful query, and varies from endpoint to endpoint
    li Data where userError is true.  This occurs when the user of the app does something wrong (like trying to add a picture of a blank wall as a member).  These responses will also contain a message attribute, which is a user-friendly description of the error.  You can show this message to the end-user.
    li A 500 response.  This happens if something is wrong with the server setup (like if the AWS credentials are corrupted).  If you get one of these, try again.  If you get 2 in a row, something is seriously wrong so check the server logs.
    li A 400 response.  This means the input was malformed.  Probably a problem client code; check the API spec again
  h4 NOTE: your OrgId MUST be valid or you will receive a 500 response on most requests
  h4 Endpoints
  p All endpoints are POST requests unless otherwise specified.  All inputs should be sent as raw JSON data unless otherwise specified
  p When I describe the 'response' part of an endpoint, I'm describing a SUCCESSFUL response. For errors, refer to the response types above
  ul
    li
      h4 /api/v1/checkFace
      p Request should contain
      ul
        li a file called 'face', sent as form-data
        li orgId
      p Please note: if orgId is invalid you will get 500 response.  If the are multiple members in the same org with the same face, only the first will be returned.
      p Success Response
      ul
        li right now, just the response from Rekognition.  I'll update this soon
    li
      h4 /api/v1/addMember
      p Request should contain
      ul
        li a file called 'face', sent as form-data
        li email
        li firstName
        li lastName
        li orgId
      p Success Response
      p The member's full entry in the SQL database.  JSON object with the fields:
      ul
        li id
        li face_id
        li org_id
        li email
        li first_name
        li last_name
        li external_id (external id is not used at this time)
    li
      h4 /api/v1/createOrg
      p Request should contain
      ul
        li email
        li name
        li password
      p Success response
      p The Org's full entry in the SQL database.  JSON object with the fields:
      ul
        li id
        li name
        li email
        li password_hash
    li
      h4 /api/v1/orgLogin
      p Request should contain
      ul
        li email
        li password
      p Success response: the org's full entry in the SQL database.  JSON object with the fields:
      ul
        li id
        li name
        li email
        li password_hash
    li
      h4 /api/v1/createEvent
      p Request should contain
      ul
        li orgId
        li name
        li startDate (formatted as Unix epoch.  If timestamp is incorrectly formatted you'll get a 500 response)
      p Success response: the event's full entry in the SQL database.  JSON object with the fields:
      ul
        li id
        li org_id
        li name
        li start_date (will be formatted as ISO date)
        li end_date
    li
      h4 /api/v1/getEvents
      p Request should contain
      ul
        li orgId
      p Success response: a JSON-formatted array of events (following the format specified earlier)
    li
      h4 /api/v1/markAttendance
      p Request should contain
      ul
        li memberId
        li eventId
      p Success response: the attendance entry.  JSON object with the fields:
      ul
        li member_id
        li event_id
